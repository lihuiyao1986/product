<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:aop="http://www.springframework.org/schema/aop" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:dubbo="http://code.alibabatech.com/schema/dubbo" xmlns:cache="http://www.springframework.org/schema/cache"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-2.5.xsd
	http://code.alibabatech.com/schema/dubbo http://code.alibabatech.com/schema/dubbo/dubbo.xsd
	http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd
	http://www.springframework.org/schema/cache   
        http://www.springframework.org/schema/cache/spring-cache.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd">
	<!-- 读取属性文件 -->
	<bean
		class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="systemPropertiesModeName" value="SYSTEM_PROPERTIES_MODE_OVERRIDE" />
		<property name="locations">
			<list>
				<value>classpath:dubbo.properties</value>
				<value>classpath:database.properties</value>
				<value>classpath:mongo.properties</value>
				<value>classpath:redis.properties</value>
			</list>
		</property>
	</bean>

	<!-- dubbo配置 -->
	<dubbo:application name="${dubbo.application.name}" owner="${dubbo.application.owner}" />
	<dubbo:registry address="${dubbo.registry.address}" />
	<dubbo:protocol name="dubbo" port="${dubbo.protocol.port}" />
	<dubbo:monitor protocol="registry" />

	<!-- 扫描业务组件 -->
	<context:component-scan base-package="com.hundsun.fund.provider.common">
		<context:include-filter type="annotation" expression="org.springframework.stereotype.Service" />
	</context:component-scan>

	<!-- 采用cglib的方式产生代理对象 -->
	<aop:aspectj-autoproxy proxy-target-class="true" />

	<!-- API调用拦截器 -->
	<bean id="APIInterceptor"
		class="com.hundsun.fund.product.commons.interceptor.APIInterceptor" />
	<aop:config>
		<!--切入点 -->
		<aop:pointcut id="APIInterceptorPoint"
			expression="execution(public * com.hundsun.fund.provider.common.*.*(..)) " />
		<!--在该切入点使用自定义拦截器 -->
		<aop:advisor pointcut-ref="APIInterceptorPoint"
			advice-ref="APIInterceptor" />
	</aop:config>
</beans>